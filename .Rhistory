scan(file.choose())
install.packages("shiny")
library(shiny)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran,package)
?group_by
by_package <- group_by(package)
by_package <- group_by(cran,package)
play()
by_package <- summarise(group_by(cran,package))
by_package
by_package <- summarise(cran,size,group_by(cran,package))
by_package <- summarise(group_by(cran,package,size))
by_package
by_package <- group_by(summarise(cran,package,size))
by_package <- summarise(cran,size,group_by(cran,size(package)))
by_package <- group_by(summarise(cran,package,sum(size)))
by_package <- summarise(cran,size,group_by(cran,package,sum(size)))
by_package <- groups(group_by(cran,package,sum(size)))
by_package
nxt()
by_package
summarise(by_package,mean(size))
summarize(by_package,mean(size))
summarize(by_package,package,mean(size))
?summarize
summarize(by_package,mean(size))
by_package
play()
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
nxt()
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
?gather
?tidyr
vignette("tidy-data")
(vignette("tidy-data"))
install.packages("RMySQL")
ucsc <- dbConnect(MySQL(), user="genome",
host = "genome-mysql.cse.ucsc.edu")
libraary(RMySQL)
library(RMySQL)
ucsc <- dbConnect(MySQL(), user="genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
ucsc <- dbConnect(MySQL(), user="genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(), user="genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysqlcse.ucsc.edu")
allTables <- dbListTables(hg19)
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
affyData
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);quantile(affyMis$misMacthes)
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);quantile(affyMis$misMacthes)
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);quantile(affyMis$misMacthes)
library("RMySQL")
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);quantile(affyMis$misMacthes)
ucscDb <- dbConnect(MySQL(), user="genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);quantile(affyMis$misMacthes)
affyMissSmall <- fetch(query,n=10);dbClearResult(query);
dbDisconnect(hg19)
affyMissSmall
source("http://bioconductor.org/biocLite,R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
librray(rhdf5)
library(rhdf5)
created <- h5createFile("example.h5")
created
created = h5createFile("example.h5")
created
ls
list.files()
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B=array(seq(0.1,2.0,by=0,1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
library(hhtr)
library(httr)
install.packages("foreign")
install.packages("RODBC")
install.packages("RMongo")
debapp = oauth_app("github",key="fdb6c3094e5128d557ba", secret="d58f083c906e8b4ae32522b1c5ae6c2ef7b4b8fc")
debapp
sig = sign_oauth1.0(debapp,token="24a32a25af475f3635ad744470fbe9a518de1eb2")
instructor = GET("https://api.github.com/users/jtleek/repos",sig)
instructor
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fdb6c3094e5128d557ba",
secret = "d58f083c906e8b4ae32522b1c5ae6c2ef7b4b8fc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
ibrary(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fdb6c3094e5128d557ba",
secret = "d58f083c906e8b4ae32522b1c5ae6c2ef7b4b8fc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fdb6c3094e5128d557ba",
secret = "d58f083c906e8b4ae32522b1c5ae6c2ef7b4b8fc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fdb6c3094e5128d557ba",
secret = "d58f083c906e8b4ae32522b1c5ae6c2ef7b4b8fc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    https://github.com/login/oauth/authorize
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fdb6c3094e5128d557ba",
secret = "d58f083c906e8b4ae32522b1c5ae6c2ef7b4b8fc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
texT(x+0.05,y+0.05,labels=as.character(1:12))
text(x+0.05,y+0.05,labels=as.character(1:12))
dataFrame <- data.frame(x=x,y=y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hClust(distxy)
hClustering <- hclust(distxy)
plot(hClustering)
heatmap(hClustering)
heatmap(distxy)
dataFrame <- data.frame(x=x,y=y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
install.packages("myplclust")
x
y
kmeansObj <- kmeans(dataFrame,centers=3)
names(kmeansObj)
kmeansObj$cluster
kmeansObj$centers
par(mar=rep(0.2,4))
plot(x,y,col=kmeansObj$cluster,pch=19,cex=2)
points(kmeansObj$centers,col=1:3)
set.seed(12345)
par(mar=rep(0.2,4))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month),data=airquality,layout=c(5,1))
xyplot(Ozone~Wind | Month,data=airquality)
xyplot(Ozone~Wind | Month,data=airquality,layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R",local=TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamond$color)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("mylabels.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"))
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
source(showme(p1(20)))
source(showMe(p1(20)))
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette("blue","green")
p3 <- colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5,0.3))
cols <- brewer.pal(3,"BunGn")
cols <- brewer.pal(3,"BunGn")
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
getwd()
setwd("~/DGWorld/Coursera_GACData/CourseraDSC_EDA_CProjects/CourseProject2")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url,dest="./W3Q1Data.csv")
download.file(url,dest="./W3Q1Data.csv",method="curl")
data <- read.csv("./W3Q1Data.csv")
View(data)
library(dplyr)
agricultureLogical <- data %>%
filter(AGS > 10000 & ACR >10 ) %>%
as.vector()
agricultureLogical
agricultureLogical <- data %>%
filter(AGS == 6 & ACR == 3 ) %>%
select(SERIALNO, AGS, ACR) %>%
as.vector()
View(agricultureLogical)
which(agricultureLogical)
agricultureLogical[which(agricultureLogical$AGS == 6 & agricultureLogical$ACR == 3),]
intsall.packages("jpeg")
install.packages("jpeg")
library(jpeg)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url,"./image.jpg")
download.file(url,"./image.jpg",method="curl")
data <- readJPEG("./image.jpg",native=TRUE)
quantile(data,probs=c(0.30,0.80))
View(data)
data <- read.csv("./W3Q1Data.csv")
View(data)
agricultureLogical <- data %>%
filter(AGS == 6 & ACR == 3 ) %>%
View
data[which(agricultureLogical==TRUE),]
agricultureLogical <- data %>%
filter(AGS == 6 & ACR == 3 ) %>%
as.vector(mode="logical") %>%
View()
agricultureLogical <- data %>%
filter(AGS == 6 & ACR == 3 ) %>%
View()
which(agricultureLogical)[1:3]
agricultureLogical[which(agricultureLogical)[1:3],]
xx <- which(agricultureLogical)[1:3]
View(agricultureLogical)
library(httr)
direccion <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
archivo <- "./ss06hid.csv"
download.file(direccion, archivo, method="curl")
data <- read.csv("./ss06hid.csv")
logicalvector <- data$ACR==3 & data$AGS==6
first3 <- which(logicalvector)[1:3] # which() treats NAs as FALSE
first3
cat("\014")
setwd("~/DGWorld/RScripts_Codes/Frequently-Used-R-Python-Octave-syntax")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
as.dendogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05, col="green")
dFsm
dist(dFsm)
hc
heatmap(dataMatrix,col=c.colors(25))
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3+,cex=2,lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which,min)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx,newCy,col=cols,pch=8,cex=2,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
plot(finalCx,Cy,col=cols1,pch=9,cex=2,lwd=2)
plot(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green"),pch=19,cex=3,lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
play()
next()
bye()
swirl()
cmat
